'From Smalltalk-80 of February 22, 1982 on 2 March 1982 at 12:16:46 pm;Modified from LV4 (graphics-animation.st) for CV4 by Evelyn Van Orden on 13 December 1983;Modified from CV4 (GraphicsAnimation-CV4.st) for DV5 by Evelyn Van Orden on 30 April 1986'!DisplayObject subclass: #EvaluationNode	instanceVariableNames: 'evalBlock boundingBox '	classVariableNames: ''	poolDictionaries: ''	category: 'Graphics-Animation'!!EvaluationNode methodsFor: 'accessing'!boundingBox	^boundingBox! !!EvaluationNode methodsFor: 'displaying'!displayOn: destForm at: aDisplayPoint clippingBox: clipRectangle rule: ruleInteger mask: aForm 	^evalBlock value		displayOn: destForm		at: aDisplayPoint		clippingBox: clipRectangle		rule: ruleInteger		mask: aForm! !!EvaluationNode methodsFor: 'private'!setBlock: aBlock	evalBlock _ aBlock fixTemps.	boundingBox _ aBlock value boundingBox! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EvaluationNode class	instanceVariableNames: ''!!EvaluationNode class methodsFor: 'instance creation'!block: aBlock	^self new setBlock: aBlock! !DisplayObject subclass: #PositionNode	instanceVariableNames: 'contents location '	classVariableNames: ''	poolDictionaries: ''	category: 'Graphics-Animation'!!PositionNode methodsFor: 'displaying'!displayOn: destForm at: aDisplayPoint clippingBox: clipRectangle rule: ruleInteger mask: aForm 	^contents		displayOn: destForm		at: aDisplayPoint+location		clippingBox: clipRectangle		rule: ruleInteger		mask: aForm! !!PositionNode methodsFor: 'private'!setContents: c location: l	contents _ c.	location _ l! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PositionNode class	instanceVariableNames: ''!!PositionNode class methodsFor: 'instance creation'!contents: c location: l	^self new setContents: c location: l! !PositionNode subclass: #MovingNode	instanceVariableNames: 'velocity '	classVariableNames: ''	poolDictionaries: ''	category: 'Graphics-Animation'!!MovingNode methodsFor: 'displaying'!displayOn: destForm at: aDisplayPoint clippingBox: clipRectangle rule: ruleInteger mask: aForm 	super		displayOn: destForm		at: aDisplayPoint		clippingBox: clipRectangle		rule: ruleInteger		mask: aForm.	location _ location + velocity! !!MovingNode methodsFor: 'private'!setVelocity: v	velocity _ v! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MovingNode class	instanceVariableNames: ''!!MovingNode class methodsFor: 'instance creation'!contents: c location: l velocity: v	^(self contents: c location: l) setVelocity: v! !MovingNode subclass: #BounceInBoxNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Graphics-Animation'!!BounceInBoxNode methodsFor: 'displaying'!displayOn: destForm at: aDisplayPoint clippingBox: clipRectangle rule: ruleInteger mask: aForm	| relLoc | 	super		displayOn: destForm		at: aDisplayPoint		clippingBox: clipRectangle		rule: ruleInteger		mask: aForm.	relLoc _ location + clipRectangle origin.	(velocity x < 0 and: [relLoc x < clipRectangle left])		ifTrue: [velocity _ velocity*(-1@1)].	(velocity x > 0 and: [(relLoc x+contents width) > clipRectangle right])		ifTrue: [velocity _ velocity*(-1@1)].	(velocity y < 0 and: [relLoc y < clipRectangle top])		ifTrue: [velocity _ velocity*(1@-1)].	(velocity y > 0 and: [(relLoc y+contents height) > clipRectangle bottom])		ifTrue: [velocity _ velocity*(1@-1)]! !DisplayObject subclass: #SequenceNode	instanceVariableNames: 'subNodes position '	classVariableNames: ''	poolDictionaries: ''	category: 'Graphics-Animation'!!SequenceNode methodsFor: 'accessing'!boundingBox	^subNodes first boundingBox! !!SequenceNode methodsFor: 'displaying'!displayOn: destForm at: aDisplayPoint clippingBox: clipRectangle rule: ruleInteger mask: aForm	subNodes size < 1 ifTrue: [^self].	position _ position + 1.	position > subNodes size ifTrue: [position _ 1].	(subNodes at: position)		displayOn: destForm		at: aDisplayPoint		clippingBox: clipRectangle		rule: ruleInteger		mask: aForm! !!SequenceNode methodsFor: 'private'!setNodes: nodeCollection index: anInteger	subNodes _ nodeCollection.	position _ anInteger! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SequenceNode class	instanceVariableNames: ''!!SequenceNode class methodsFor: 'instance creation'!subNodes: aCollection	^self subNodes: aCollection index: 1!subNodes: aCollection index: index	^self new setNodes: aCollection index: index! !DisplayObject subclass: #SuperpositionNode	instanceVariableNames: 'subNodes '	classVariableNames: ''	poolDictionaries: ''	category: 'Graphics-Animation'!!SuperpositionNode methodsFor: 'displaying'!displayOn: destForm at: aDisplayPoint clippingBox: clipRectangle rule: ruleInteger mask: aForm 	subNodes do:		[:node | node					displayOn: destForm					at: aDisplayPoint					clippingBox: clipRectangle					rule: ruleInteger					mask: aForm]! !!SuperpositionNode methodsFor: 'private'!setSubNodes: aCollection	subNodes _ aCollection! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SuperpositionNode class	instanceVariableNames: ''!!SuperpositionNode class methodsFor: 'instance creation'!subNodes: aCollection	^self new setSubNodes: aCollection! !StandardSystemController subclass: #AnimationController	instanceVariableNames: ''	classVariableNames: 'AnimationBlueButtonMenu AnimationBlueButtonMessages '	poolDictionaries: ''	category: 'Graphics-Animation'!!AnimationController methodsFor: 'initialize-release'!initializeBlueButtonMenu	"Initialize the blue button pop-up menu and corresponding array of messages	for the receiver."	self blueButtonMenu: AnimationBlueButtonMenu 		blueButtonMessages: AnimationBlueButtonMessages! !!AnimationController methodsFor: 'control defaults'!controlActivity	sensor blueButtonPressed & self viewHasCursor 		ifTrue: [^self blueButtonActivity].	view displayView.	"super controlActivity"	"WindowNode example"!controlInitialize	view display.	status _ #active! !!AnimationController methodsFor: 'menu messages'!close	"The receiver's view should be removed from the screen and from the	collection of scheduled views."	model changeRequest  "check for changes in progress"		ifFalse: [^self].	status _ #closed.	view clear: Form gray!move	"Ask the user to designate a new origin position for the receiver's view."	| form |	Sensor cursorPoint: view displayBox origin.	view clear: Form gray.	Cursor origin showWhile:		[[Sensor noButtonPressed] whileTrue: []].	view align: view displayBox origin		with: sensor cursorPoint.	view display!open	"Create an area on the screen in which the receiver's scheduled controller can	be displayed. Make it the active controller."	view display.	status _ #open.	ScheduledControllers scheduleActive: self! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!AnimationController class	instanceVariableNames: ''!!AnimationController class methodsFor: 'class initialization'!initialize	"AnimationController initialize."	AnimationBlueButtonMenu _ PopUpMenu labels: 'moveclose' lines: #().	AnimationBlueButtonMessages _ #(move close ).	super initialize! !AnimationController initialize!FormView subclass: #AnimationView	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Graphics-Animation'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!AnimationView class	instanceVariableNames: ''!!AnimationView class methodsFor: 'instance creation'!openOn: anAnimation	| view |	view _ self new.	view model: anAnimation.	view controller: AnimationController new.	view borderWidth: 2.	view translateBy: 50@50.	view controller open! !DisplayObject subclass: #Animation	instanceVariableNames: 'window contents '	classVariableNames: 'SampleNodes '	poolDictionaries: ''	category: 'Graphics-Animation'!!Animation methodsFor: 'accessing'!boundingBox	^window!offset	^0@0! !!Animation methodsFor: 'displaying'!displayOn: destForm at: aDisplayPoint clippingBox: clipRectangle rule: ruleInteger mask: aForm 	| buffer |	buffer _ Form extent: window extent fromArray: #() offset: 0@0.	"buffer fill: clipRectangle mask: Form white."	contents		displayOn: buffer		at: 0@0		clippingBox: buffer boundingBox		rule: Form over		mask: Form black.	buffer		displayOn: destForm		at: aDisplayPoint		clippingBox: clipRectangle		rule: ruleInteger		mask: aForm! !!Animation methodsFor: 'private'!window: w contents: c	window _ w.	contents _ c! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Animation class	instanceVariableNames: ''!!Animation class methodsFor: 'class initialization'!createBox	"Create a box whose contents are from the display near the cursor."	^EvaluationNode block:		[(Form fromDisplay: (Sensor mousePoint extent: 50@50)) borderWidth: 2]!createDoughnut	"Create a doughnut with a transparent center."	| formRect pen form |	formRect _ 0@0 extent: 50@50.	pen _ Pen new defaultNib: 8; combinationRule: Form under; north.	Display fill: formRect mask: Form white.	pen place: 5@25.	1 to: 36 do: [:n | pen go: Float pi*2*20/36; turn: 10].	form _ Form fromDisplay: formRect.	Display fill: formRect mask: Form white.	pen place: 5@25; mask: Form darkGray.	1 to: 36 do: [:n | pen go: Float pi*2*20/36; turn: 10].	^OpaqueForm figure: (Form fromDisplay: formRect) shape: form!createStar	"Create 5 versions of a star."	| formRect pen |	formRect _ 0@0 extent: 50@50.	pen _ Pen new defaultNib: 2.	^SequenceNode subNodes:		((1 to: 5) collect:			[:n | 			Display fill: formRect mask: Form white.			pen north; turn: 72/6*n; place: formRect center; spiral: 45 angle: 144.			OpaqueForm shape: (Form fromDisplay: formRect)])!initialize	"Animation initialize."	SampleNodes _ Array new: 3.	SampleNodes at: 1 put:		(BounceInBoxNode contents: self createBox location: 20@0 velocity: 1@1).	SampleNodes at: 2 put:		(BounceInBoxNode contents: self createStar location: 20@0 velocity: 2@3).	SampleNodes at: 3 put:		(BounceInBoxNode contents: self createDoughnut location: 0@0 velocity: 3@3)! !!Animation class methodsFor: 'instance creation'!window: w contents: c	^self new window: w contents: c! !!Animation class methodsFor: 'examples'!example	"Animation example."	AnimationView openOn:		(self			window: (0@0 extent: 300@200)			contents: (SuperpositionNode subNodes: SampleNodes))! !Animation initialize!